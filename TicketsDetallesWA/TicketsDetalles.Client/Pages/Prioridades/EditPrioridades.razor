@page "/EditPrioridades/{PrioridadId:int}";

@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<EditForm Model="Prioridades" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">

        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Editar Prioridad</h3>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="Descripcion" class="form-label">Descripci&oacuten:</label>
                    <InputText @bind-Value="Prioridades.Descripcion" class="form-control" placeholder="Ingrese la Descripci&oacuten" />
                    <ValidationMessage For="@(() => Prioridades.Descripcion)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="DiasCompromiso" class="form-label">D&iacuteas Compromiso:</label>
                    <InputNumber @bind-Value="Prioridades.DiasCompromiso" class="form-control" placeholder="Ingrese los D&iacuteas Compromiso" />
                    <ValidationMessage For="@(() => Prioridades.DiasCompromiso)" />
                </div>
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/PrioridadesIndex/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Retroceder </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    public Prioridades Prioridades = new Prioridades();

    [Parameter]
    public int PrioridadID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>("api/Prioridades/" + PrioridadID);
        if (prioridadEncontrado != null)
        {
            this.Prioridades = prioridadEncontrado;
        }
    }


    public async Task Guardar()
    {
        var guardado = await httpClient.PutAsJsonAsync("api/Prioridades", this.Prioridades);
        if (guardado.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/PrioridadesIndex");
        }
    }

}
